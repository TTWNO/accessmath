use std::io;

use ebnf::get_grammar;

fn main() -> Result<(), Box<dyn std::error::Error>> {
  let grammar = r#"
delim ::= "\b";
exp_line ::= "⠐" exp? "⠣⠫⠪⠒⠒⠕⠻";
exp_line_segment ::= "⠐" exp? "⠣⠱⠻";
exp_ray ::= "⠐" exp? "⠣⠫⠕⠻";
exp_arc ::= "⠐" exp? "⠣⠫⠁⠻";
exp_sum ::= "⠐⠨⠠⠎⠩" exp? "⠣" exp? "⠻";
exp_vector ::= "⠐" exp? "⠣⠫⠒⠒⠈⠕⠻";
exp_binom ::= "⠷⠠⠉⠰" exp? "⠐⠘" exp? "⠐⠾";
exp_limit ::= "⠐⠇⠊⠍⠩" exp? "⠀⠫⠕⠀" exp? "⠻";
exp_sup ::= "⠘" exp? "⠐";
exp_sub ::= "⠰" exp? "⠐";
exp_under ::= "⠐" exp? "⠩" exp? "⠻" ;
exp_over ::= "⠐" exp? "⠣" exp? "⠻";
exp_underover ::= "⠐" exp? "⠩" exp? "⠣" s "⠻";
exp_sub_simple ::= "⠰";
exp_sup_simple ::= "⠘";
en_uppercase_continue ::= "⠠⠠" ("⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵")+ ("⠠⠄" (⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵"))?;
other ::= ("⠫⠒⠒⠕⠫⠒⠒⠕⠫⠒⠒⠕"|"⠐⠫⠉⠸⠫⠈⠡⠻⠣⠸⠣⠻"|"⠫⠉⠸⠫⠫⠉⠸⠫⠈⠡⠻⠻"|"⠫⠪⠒⠒⠫⠪⠒⠒⠫⠪⠒⠒"|"⠫⠣⠒⠒⠕⠐⠫⠩⠒⠒⠕"|"⠫⠣⠒⠒⠕⠐⠫⠣⠒⠒⠕"|"⠫⠩⠒⠒⠕⠐⠫⠩⠒⠒⠕"|"⠫⠩⠒⠒⠕⠐⠫⠣⠒⠒⠕"|"⠫⠢⠤⠔⠒⠢⠤⠔⠒⠢⠕"|"⠐⠫⠒⠒⠕⠩⠈⠱⠈⠱⠻"|"⠫⠪⠒⠒⠈⠫⠉⠸⠫⠬⠻"|"⠐⠫⠪⠒⠒⠩⠈⠱⠈⠱⠻"|"⠫⠈⠪⠒⠒⠫⠒⠒⠠⠕"|"⠫⠒⠒⠈⠕⠫⠠⠪⠒⠒"|"⠫⠪⠨⠗⠻⠸⠫⠫⠁⠻"|"⠐⠫⠒⠒⠕⠣⠸⠐⠅⠻"|"⠐⠫⠪⠒⠒⠣⠸⠨⠂⠻"|"⠐⠨⠅⠩⠡⠡⠣⠡⠡⠻"|"⠐⠨⠡⠣⠫⠣⠒⠒⠳⠻"|"⠳⠳⠈⠫⠣⠒⠒⠕⠻"|"⠳⠳⠈⠫⠩⠒⠒⠕⠻"|"⠳⠳⠈⠫⠪⠒⠒⠕⠻"|"⠐⠤⠩⠡⠡⠣⠡⠡⠻"|"⠐⠅⠈⠐⠅⠈⠐⠅⠻"|"⠨⠂⠈⠨⠂⠈⠨⠂⠻"|"⠫⠪⠒⠒⠕⠈⠨⠡⠻"|"⠐⠫⠒⠒⠕⠣⠨⠅⠻"|"⠐⠫⠒⠒⠕⠣⠈⠱⠻"|"⠐⠫⠪⠒⠒⠩⠈⠱⠻"|"⠐⠫⠒⠒⠕⠩⠈⠱⠻"|"⠐⠫⠪⠒⠒⠣⠐⠅⠻"|"⠐⠫⠒⠒⠕⠣⠨⠂⠻"|"⠫⠪⠒⠒⠈⠸⠐⠅⠻"|"⠮⠈⠫⠉⠸⠫⠡⠻⠻"|"⠐⠈⠱⠈⠱⠣⠸⠣⠻"|"⠐⠸⠇⠣⠡⠡⠡⠡⠻"|"⠐⠫⠪⠒⠒⠣⠨⠅⠻"|"⠫⠒⠒⠕⠈⠸⠨⠂⠻"|"⠐⠫⠪⠒⠒⠣⠈⠱⠻"|"⠳⠈⠫⠪⠒⠒⠕⠻"|"⠫⠒⠒⠕⠫⠪⠒⠒"|"⠫⠪⠒⠒⠫⠒⠒⠕"|"⠫⠪⠒⠒⠫⠪⠒⠒"|"⠫⠒⠒⠕⠫⠒⠒⠕"|"⠳⠈⠫⠪⠶⠶⠕⠻"|"⠨⠡⠈⠫⠒⠒⠕⠻"|"⠳⠳⠈⠫⠪⠒⠒⠻"|"⠳⠳⠈⠫⠒⠒⠕⠻"|"⠐⠈⠱⠩⠡⠣⠡⠻"|"⠐⠨⠅⠣⠡⠣⠡⠻"|"⠐⠨⠅⠩⠡⠣⠡⠻"|"⠐⠨⠅⠣⠙⠑⠋⠻"|"⠫⠲⠸⠫⠢⠈⠔⠻"|"⠐⠫⠒⠒⠕⠩⠬⠻"|"⠐⠫⠪⠒⠒⠩⠬⠻"|"⠫⠪⠒⠒⠈⠐⠅⠻"|"⠐⠈⠱⠨⠅⠣⠡⠻"|"⠨⠅⠐⠨⠅⠐⠨⠅"|"⠐⠐⠅⠱⠱⠣⠡⠻"|"⠐⠨⠂⠱⠱⠣⠡⠻"|"⠨⠐⠅⠌⠈⠱⠈⠱"|"⠨⠨⠂⠌⠈⠱⠈⠱"|"⠨⠐⠅⠈⠨⠐⠅⠻"|"⠨⠨⠂⠈⠨⠨⠂⠻"|"⠐⠸⠐⠅⠩⠈⠡⠻"|"⠐⠸⠨⠂⠩⠈⠡⠻"|"⠐⠸⠐⠅⠱⠣⠡⠻"|"⠐⠸⠨⠂⠱⠣⠡⠻"|"⠐⠨⠅⠩⠳⠣⠳⠻"|"⠨⠡⠈⠫⠪⠒⠒⠻"|"⠫⠪⠒⠒⠈⠈⠡⠻"|"⠫⠒⠒⠕⠈⠨⠂⠻"|"⠳⠈⠫⠪⠒⠒⠻"|"⠳⠈⠫⠒⠒⠕⠻"|"⠫⠣⠪⠒⠒⠕⠳"|"⠳⠈⠫⠪⠶⠶⠻"|"⠳⠈⠫⠶⠶⠕⠻"|"⠫⠪⠢⠤⠔⠒⠢"|"⠫⠢⠤⠔⠒⠢⠕"|"⠫⠪⠸⠫⠫⠁⠻"|"⠮⠮⠮⠈⠫⠑⠻"|"⠮⠈⠫⠪⠢⠔⠻"|"⠮⠈⠫⠢⠔⠕⠻"|"⠐⠨⠅⠣⠨⠡⠻"|"⠐⠨⠅⠣⠫⠁⠻"|"⠐⠨⠅⠣⠸⠣⠻"|"⠐⠨⠅⠣⠸⠩⠻"|"⠐⠨⠅⠣⠈⠼⠻"|"⠐⠨⠅⠣⠫⠞⠻"|"⠐⠨⠅⠣⠸⠦⠻"|"⠨⠬⠈⠫⠪⠒⠻"|"⠫⠉⠸⠫⠈⠡⠻"|"⠫⠉⠸⠫⠸⠌⠻"|"⠫⠉⠸⠫⠨⠡⠻"|"⠫⠉⠸⠫⠈⠼⠻"|"⠫⠉⠸⠫⠨⠅⠻"|"⠫⠉⠸⠫⠤⠤⠻"|"⠐⠨⠅⠩⠸⠣⠻"|"⠨⠡⠈⠸⠐⠅⠻"|"⠨⠡⠈⠸⠨⠂⠻"|"⠫⠣⠳⠒⠒⠨⠡"|"⠫⠲⠸⠫⠈⠼⠻"|"⠨⠠⠎⠈⠫⠉⠻"|"⠫⠉⠸⠫⠨⠌⠻"|"⠫⠞⠸⠫⠈⠡⠻"|"⠐⠈⠩⠣⠱⠱⠻"|"⠐⠈⠩⠩⠱⠱⠻"|"⠐⠈⠬⠣⠱⠱⠻"|"⠐⠈⠬⠩⠱⠱⠻"|"⠳⠳⠳⠈⠸⠇⠻"|"⠐⠐⠅⠣⠸⠦⠻"|"⠐⠨⠂⠣⠸⠦⠻"|"⠐⠅⠱⠱⠈⠡⠻"|"⠨⠂⠱⠱⠈⠡⠻"|"⠨⠐⠅⠈⠱⠈⠱"|"⠨⠨⠂⠈⠱⠈⠱"|"⠸⠐⠅⠸⠫⠡⠻"|"⠸⠨⠂⠸⠫⠡⠻"|"⠐⠸⠐⠅⠩⠬⠻"|"⠐⠸⠨⠂⠩⠬⠻"|"⠸⠐⠅⠈⠱⠈⠱"|"⠸⠨⠂⠈⠱⠈⠱"|"⠸⠨⠂⠐⠸⠐⠅"|"⠌⠫⠩⠒⠒⠳⠽"|"⠫⠳⠒⠐⠫⠳⠒"|"⠠⠠⠧⠊⠊⠊"|"⠫⠣⠪⠒⠒⠕"|"⠫⠣⠒⠒⠕⠕"|"⠫⠩⠒⠒⠕⠕"|"⠫⠪⠒⠒⠠⠽"|"⠫⠠⠯⠒⠒⠕"|"⠫⠣⠳⠒⠒⠕"|"⠫⠩⠳⠒⠒⠕"|"⠫⠪⠒⠒⠈⠽"|"⠫⠈⠯⠒⠒⠕"|"⠫⠪⠔⠒⠢⠕"|"⠫⠩⠔⠢⠔⠕"|"⠫⠩⠠⠳⠒⠕"|"⠫⠣⠒⠒⠠⠕"|"⠫⠣⠒⠒⠈⠕"|"⠫⠩⠒⠒⠈⠕"|"⠫⠩⠒⠒⠠⠕"|"⠫⠣⠪⠶⠶⠕"|"⠫⠣⠒⠀⠒⠕"|"⠫⠩⠒⠀⠒⠕"|"⠮⠮⠈⠫⠑⠻"|"⠌⠈⠱⠌⠨⠅"|"⠈⠱⠈⠱⠈⠱"|"⠐⠨⠅⠣⠡⠻"|"⠨⠡⠈⠨⠅⠻"|"⠐⠨⠅⠣⠍⠻"|"⠐⠅⠈⠐⠅⠻"|"⠨⠂⠈⠨⠂⠻"|"⠸⠐⠅⠌⠨⠅"|"⠸⠨⠂⠌⠨⠅"|"⠫⠉⠸⠫⠬⠻"|"⠫⠉⠸⠫⠤⠻"|"⠫⠉⠸⠫⠡⠻"|"⠫⠲⠸⠫⠬⠻"|"⠫⠲⠸⠫⠱⠻"|"⠫⠲⠸⠫⠡⠻"|"⠫⠨⠡⠒⠒⠡"|"⠫⠡⠒⠒⠨⠡"|"⠐⠈⠬⠩⠱⠻"|"⠐⠈⠩⠣⠱⠻"|"⠐⠈⠬⠣⠱⠻"|"⠐⠈⠑⠣⠡⠻"|"⠐⠈⠑⠣⠱⠻"|"⠐⠈⠢⠣⠱⠻"|"⠐⠱⠩⠸⠣⠻"|"⠫⠲⠸⠫⠳⠻"|"⠨⠨⠷⠨⠨⠷"|"⠨⠨⠾⠨⠨⠾"|"⠫⠪⠶⠶⠶⠕"|"⠫⠪⠒⠒⠒⠳"|"⠫⠳⠒⠒⠒⠕"|"⠫⠪⠶⠶⠶⠳"|"⠫⠳⠶⠶⠶⠕"|"⠫⠘⠪⠒⠒⠕"|"⠫⠰⠪⠒⠒⠕"|"⠡⠈⠨⠨⠷⠻"|"⠡⠈⠨⠨⠾⠻"|"⠫⠲⠸⠫⠔⠻"|"⠫⠲⠸⠫⠢⠻"|"⠐⠫⠞⠣⠡⠻"|"⠨⠬⠈⠫⠡⠻"|"⠨⠬⠈⠫⠬⠻"|"⠈⠩⠈⠈⠩⠻"|"⠈⠬⠈⠈⠬⠻"|"⠮⠈⠨⠠⠎⠻"|"⠐⠬⠣⠨⠡⠻"|"⠐⠬⠣⠸⠣⠻"|"⠐⠬⠣⠈⠱⠻"|"⠐⠈⠡⠣⠡⠻"|"⠐⠈⠡⠩⠱⠻"|"⠫⠞⠸⠫⠬⠻"|"⠫⠞⠸⠫⠤⠻"|"⠐⠨⠬⠣⠱⠻"|"⠐⠨⠩⠣⠱⠻"|"⠨⠩⠈⠈⠩⠻"|"⠨⠬⠈⠈⠬⠻"|"⠐⠈⠩⠣⠡⠻"|"⠐⠈⠬⠣⠡⠻"|"⠈⠬⠈⠈⠩⠻"|"⠐⠈⠩⠩⠱⠻"|"⠐⠨⠅⠩⠡⠻"|"⠐⠸⠇⠣⠡⠻"|"⠳⠳⠈⠸⠇⠻"|"⠐⠈⠱⠣⠡⠻"|"⠈⠱⠈⠱⠨⠅"|"⠐⠨⠅⠩⠬⠻"|"⠐⠨⠅⠣⠬⠻"|"⠐⠂⠐⠂⠨⠅"|"⠐⠅⠈⠨⠡⠻"|"⠨⠂⠈⠨⠡⠻"|"⠐⠅⠱⠱⠘⠡"|"⠨⠂⠱⠱⠘⠡"|"⠐⠅⠈⠱⠈⠱"|"⠨⠂⠈⠱⠈⠱"|"⠐⠅⠨⠅⠨⠂"|"⠨⠂⠨⠅⠐⠅"|"⠐⠅⠈⠱⠨⠂"|"⠨⠂⠈⠱⠐⠅"|"⠐⠅⠨⠂⠨⠅"|"⠨⠂⠐⠅⠨⠅"|"⠈⠱⠐⠅⠨⠅"|"⠈⠱⠨⠂⠨⠅"|"⠨⠂⠈⠐⠅⠻"|"⠨⠐⠅⠌⠨⠅"|"⠨⠨⠂⠌⠨⠅"|"⠸⠐⠅⠸⠨⠂"|"⠸⠨⠂⠸⠐⠅"|"⠸⠐⠅⠸⠐⠅"|"⠸⠨⠂⠸⠨⠂"|"⠫⠩⠒⠒⠳⠽"|"⠐⠨⠅⠩⠳⠻"|"⠐⠨⠅⠣⠳⠻"|"⠐⠳⠣⠨⠡⠻"|"⠐⠳⠩⠨⠡⠻"|"⠈⠱⠈⠫⠇⠻"|"⠱⠈⠳⠳⠳⠻"|"⠠⠠⠊⠊⠊"|"⠠⠠⠧⠊⠊"|"⠫⠣⠒⠒⠕"|"⠫⠩⠒⠒⠕"|"⠫⠪⠒⠒⠕"|"⠫⠘⠪⠒⠒"|"⠫⠘⠒⠒⠕"|"⠫⠰⠒⠒⠕"|"⠫⠰⠪⠒⠒"|"⠫⠪⠔⠒⠢"|"⠫⠔⠒⠢⠕"|"⠫⠪⠪⠒⠒"|"⠫⠒⠒⠕⠕"|"⠫⠪⠒⠒⠳"|"⠫⠳⠒⠒⠕"|"⠫⠪⠒⠈⠳"|"⠫⠈⠪⠒⠒"|"⠫⠠⠪⠒⠒"|"⠫⠒⠒⠈⠕"|"⠫⠒⠒⠠⠕"|"⠫⠣⠶⠶⠕"|"⠫⠩⠶⠶⠕"|"⠫⠪⠶⠶⠕"|"⠫⠘⠪⠶⠶"|"⠫⠘⠶⠶⠕"|"⠫⠰⠶⠶⠕"|"⠫⠰⠪⠶⠶"|"⠫⠪⠒⠀⠒"|"⠫⠒⠀⠒⠕"|"⠳⠫⠪⠒⠒"|"⠫⠒⠒⠕⠳"|"⠐⠬⠣⠡⠻"|"⠫⠪⠨⠗⠻"|"⠮⠈⠫⠉⠻"|"⠈⠱⠌⠨⠅"|"⠌⠈⠱⠈⠱"|"⠈⠱⠈⠱⠱"|"⠠⠈⠱⠨⠅"|"⠐⠅⠌⠨⠅"|"⠨⠂⠌⠨⠅"|"⠌⠈⠣⠠⠣"|"⠌⠐⠅⠈⠱"|"⠌⠨⠂⠈⠱"|"⠌⠐⠅⠨⠂"|"⠌⠨⠂⠐⠅"|"⠨⠐⠅⠈⠱"|"⠨⠨⠂⠈⠱"|"⠌⠸⠐⠅⠱"|"⠌⠸⠨⠂⠱"|"⠡⠈⠨⠬⠻"|"⠬⠈⠨⠬⠻"|"⠫⠣⠒⠒⠳"|"⠫⠳⠳⠳⠒"|"⠌⠫⠳⠶⠶"|"⠌⠫⠳⠳⠒"|"⠌⠫⠳⠳⠶"|"⠫⠒⠒⠨⠡"|"⠫⠞⠨⠗⠻"|"⠡⠈⠐⠅⠻"|"⠡⠈⠨⠂⠻"|"⠱⠈⠈⠑⠻"|"⠱⠈⠈⠢⠻"|"⠈⠬⠈⠡⠻"|"⠫⠨⠡⠒⠒"|"⠫⠪⠒⠒⠒"|"⠫⠒⠒⠒⠕"|"⠫⠪⠶⠶⠶"|"⠫⠶⠶⠶⠕"|"⠫⠪⠨⠁⠻"|"⠫⠪⠨⠕⠻"|"⠫⠳⠶⠶⠳"|"⠮⠈⠱⠱⠻"|"⠮⠈⠸⠌⠻"|"⠮⠈⠠⠉⠻"|"⠮⠈⠫⠲⠻"|"⠮⠈⠈⠡⠻"|"⠮⠈⠨⠩⠻"|"⠮⠈⠨⠬⠻"|"⠐⠬⠩⠡⠻"|"⠐⠱⠩⠡⠻"|"⠨⠩⠈⠡⠻"|"⠨⠬⠈⠤⠻"|"⠨⠬⠱⠨⠩"|"⠨⠩⠱⠨⠬"|"⠨⠬⠐⠨⠬"|"⠨⠩⠐⠨⠩"|"⠈⠩⠈⠳⠻"|"⠈⠬⠈⠳⠻"|"⠈⠩⠈⠱⠻"|"⠈⠬⠈⠱⠻"|"⠈⠱⠱⠈⠱"|"⠨⠅⠐⠨⠅"|"⠐⠅⠈⠱⠱"|"⠨⠂⠈⠱⠱"|"⠨⠂⠐⠐⠅"|"⠨⠐⠅⠌⠱"|"⠨⠨⠂⠌⠱"|"⠨⠐⠅⠨⠅"|"⠨⠨⠂⠨⠅"|"⠸⠐⠅⠨⠅"|"⠸⠨⠂⠨⠅"|"⠸⠐⠅⠈⠱"|"⠸⠨⠂⠈⠱"|"⠫⠣⠶⠶⠳"|"⠱⠈⠫⠇⠻"|"⠷⠠⠉⠾"|"⠷⠠r⠾"|"⠤⠤⠤⠤"|"⠈⠴⠴⠴"|"⠠⠠⠊⠊"|"⠠⠠⠊⠧"|"⠠⠠⠧⠊"|"⠠⠠⠊⠭"|"⠫⠪⠒⠒"|"⠫⠒⠒⠕"|"⠫⠢⠔⠕"|"⠫⠪⠢⠔"|"⠫⠪⠶⠶"|"⠫⠶⠶⠕"|"⠫⠪⠸⠸"|"⠫⠸⠸⠕"|"⠣⠒⠜⠻"|"⠣⠲⠜⠻"|"⠌⠈⠱⠱"|"⠈⠱⠨⠅"|"⠈⠱⠈⠱"|"⠈⠣⠠⠣"|"⠐⠂⠨⠅"|"⠨⠅⠐⠂"|"⠨⠅⠨⠅"|"⠐⠅⠨⠅"|"⠨⠂⠨⠅"|"⠌⠐⠅⠱"|"⠌⠨⠂⠱"|"⠐⠅⠈⠱"|"⠨⠂⠈⠱"|"⠐⠅⠨⠂"|"⠨⠂⠐⠅"|"⠌⠸⠐⠅"|"⠌⠸⠨⠂"|"⠸⠐⠅⠱"|"⠸⠨⠂⠱"|"⠫⠳⠒⠒"|"⠫⠒⠒⠳"|"⠫⠳⠶⠶"|"⠫⠳⠳⠒"|"⠫⠳⠳⠶"|"⠌⠫⠳⠒"|"⠩⠒⠒⠒"|"⠘⠒⠒⠒"|"⠰⠒⠒⠒"|"⠈⠈⠸⠷"|"⠈⠈⠸⠾"|"⠮⠮⠮⠮"|"⠮⠈⠱⠻"|"⠨⠬⠨⠩"|"⠨⠩⠨⠬"|"⠈⠩⠈⠩"|"⠈⠬⠈⠬"|"⠨⠅⠈⠱"|"⠐⠅⠱⠱"|"⠨⠂⠱⠱"|"⠨⠅⠐⠅"|"⠨⠅⠨⠂"|"⠈⠱⠐⠅"|"⠈⠱⠨⠂"|"⠈⠣⠨⠅"|"⠨⠐⠅⠱"|"⠨⠨⠂⠱"|"⠸⠐⠅⠳"|"⠳⠸⠨⠂"|"⠫⠒⠳⠳"|"⠫⠶⠳⠳"|"⠈⠠⠎"|"⡘⠨⠡"|"⠂⠌⠲"|"⠂⠌⠆"|"⠒⠌⠲"|"⠨⠠⠁"|"⠨⠠⠃"|"⠨⠠⠛"|"⠨⠠⠙"|"⠨⠠⠑"|"⠨⠠⠵"|"⠨⠠⠱"|"⠨⠠⠹"|"⠨⠠⠊"|"⠨⠠⠅"|"⠨⠠⠇"|"⠨⠠⠍"|"⠨⠠⠝"|"⠨⠠⠭"|"⠨⠠⠕"|"⠨⠠⠏"|"⠨⠠⠗"|"⠨⠠⠎"|"⠨⠠⠞"|"⠨⠠⠥"|"⠨⠠⠋"|"⠨⠠⠯"|"⠨⠠⠽"|"⠨⠠⠺"|"⠨⠈⠹"|"⠨⠈⠏"|"⠨⠈⠅"|"⠸⠸⠻"|"⠂⠂⠂"|"⠈⠴⠴"|"⠈⠰⠇"|"⠈⠠⠁"|"⠌⠈⠿"|"⠌⠈⠑"|"⠌⠈⠢"|"⠌⠫⠇"|"⠮⠮⠮"|"⠤⠐⠂"|"⠠⠈⠱"|"⠌⠈⠱"|"⠱⠈⠱"|"⠈⠱⠱"|"⠈⠣⠱"|"⠌⠨⠅"|"⠌⠸⠇"|"⠐⠅⠱"|"⠨⠂⠱"|"⠌⠐⠅"|"⠌⠨⠂"|"⠨⠐⠅"|"⠨⠨⠂"|"⠸⠐⠅"|"⠸⠨⠂"|"⠫⠳⠒"|"⠫⠳⠶"|"⠠⠱⠱"|"⠱⠐⠅"|"⠱⠨⠂"|"⠒⠒⠒"|"⠈⠘⠷"|"⠈⠘⠾"|"⠈⠰⠷"|"⠈⠰⠾"|"⠈⠠⠷"|"⠈⠠⠾"|"⠨⠠⠷"|"⠨⠠⠾"|"⠫⠸⠲"|"⠫⠸⠗"|"⠫⠸⠞"|"⠸⠨⠫"|"⠫⠸⠉"|"⠈⠸⠷"|"⠈⠸⠾"|"⠨⠨⠷"|"⠨⠨⠾"|"⠨⠸⠷"|"⠨⠸⠾"|"⠫⠪⠱"|"⠫⠞⠱"|"⠫⠞⠎"|"⠫⠒⠳"|"⠫⠶⠳"|"⠳⠳⠳"|"⠫⠸⠢"|"⠫⠸⠖"|"⠫⠸⠑"|"⠫⠸⠦"|"⠸⠈⠷"|"⠸⠈⠾"|"⠸⠖"|"⠨⠼"|"⠈⠎"|"⠈⠴"|"⠸⠯"|"⠐⠂"|"⠸⠆"|"⠐⠅"|"⠨⠅"|"⠨⠂"|"⠸⠦"|"⠈⠁"|"⠈⠷"|"⠸⠡"|"⠈⠾"|"⠸⠣"|"⠨⠷"|"⠨⠾"|"⠈⠱"|"⠈⠉"|"⠈⠇"|"⠬⠤"|"⡘⠆"|"⡘⠒"|"⠨⠏"|"⡘⠂"|"⠈⠡"|"⠨⠌"|"⠨⠁"|"⠨⠃"|"⠨⠛"|"⠨⠙"|"⠨⠑"|"⠨⠵"|"⠨⠱"|"⠨⠹"|"⠨⠊"|"⠨⠇"|"⠨⠍"|"⠨⠝"|"⠨⠭"|"⠨⠕"|"⠨⠗"|"⠨⠒"|"⠨⠎"|"⠨⠞"|"⠨⠥"|"⠨⠋"|"⠨⠯"|"⠨⠽"|"⠨⠺"|"⠤⠤"|"⠳⠳"|"⠠⠦"|"⠴⠄"|"⠸⠻"|"⠔⠔"|"⠄⠄"|"⠈⠓"|"⠊⠍"|"⠗⠑"|"⠠⠊"|"⠠⠧"|"⠠⠭"|"⠈⠯"|"⠈⠙"|"⠈⠿"|"⠸⠴"|"⠨⠫"|"⠈⠑"|"⠈⠢"|"⠸⠳"|"⠤⠬"|"⠸⠌"|"⠈⠼"|"⠨⠡"|"⠜⠻"|"⠸⠿"|"⠠⠿"|"⠫⠪"|"⠌⠳"|"⠫⠇"|"⠈⠩"|"⠈⠬"|"⠨⠩"|"⠨⠬"|"⠮⠮"|"⠠⠡"|"⠈⠌"|"⠰⠆"|"⠨⠤"|"⠸⠇"|"⠫⠏"|"⠫⠎"|"⠫⠁"|"⠫⠄"|"⠠⠷"|"⠠⠾"|"⠫⠲"|"⠫⠗"|"⠫⠞"|"⠫⠙"|"⠫⠉"|"⠣⠮"|"⠩⠮"|"⠫⠢"|"⠫⠖"|"⠫⠑"|"⠄"|"⠷"|"⠾"|"⠡"|"⠬"|"⠠"|"⠤"|"⠨"|"⠌"|"⠴"|"⠂"|"⠆"|"⠒"|"⠲"|"⠢"|"⠖"|"⠶"|"⠦"|"⠔"|"⠸"|"⠳"|"⠱"|"⠮"|"⠣"|"⠜"|"⠿");
en_lowecase ::= ("⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵");
en_uppercase ::= ("⠠" (⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵"));
operand ::= ("⠬"|"⠤"|"⠈⠡"|"⠡"|"⠨⠌"|"⠨⠅"|"⠨⠂"|"⠐⠅")+;
number ::= "⠼"? ("⠴"|"⠂"|"⠆"|"⠒"|"⠲"|"⠢"|"⠖"|"⠶"|"⠦"|"⠔")+;
const ::= (en_uppercase_continue|en_lowercase|en_uppercase|number|other)+;
exp_frac ::= ("⠠")*"⠹" exp? ("⠠")*"⠌" exp? ("⠠")*"⠼";
exp_sqrt ::= "⠜" exp? "⠻";
exp_root ::= "⠣" exp? "⠜" exp? "⠻";
exp_parenthesis ::= "⠷" exp? "⠾";
exp_square_bracket ::= "⠈⠷" exp? "⠈⠾";
exp_curly_brace ::= "⠨⠷" exp? "⠨⠾";
exp ::= delim? (exp_line|exp_line_segment|exp_raw|exp_arc|exp_sum|exp_vector|exp_binom|exp_limit|exp_sup|exp_sub|exp_under|exp_over|exp_underover|exp_sub_simple|exp_sup_simple|exp_frac|exp_sqrt|exp_root|exp_parenthesis|exp_square_bracket|exp_curly_brace|const|operand)+ delim?;
"#;
  let _converter = get_grammar(grammar)?;
  let mut query = String::new();
  io::stdin()
    .read_line(&mut query)
    .expect("Could not read input");
  // can't figure out how to convert it yet.
  println!("{}", query);
  Ok(())
}
