use std::io;

//use rand::{SeedableRng, rngs::StdRng};
use bnf::Grammar;

fn main() -> Result<(), Box<dyn std::error::Error>> {
  let grammar = r#"
<exp> ::= <delim> <expr_i> <delim> | <expr_i>
<delim> ::= "\b"
<exp_line> ::= "⠐" <exp> "⠣⠫⠪⠒⠒⠕⠻"
             | "⠐" "⠣⠫⠪⠒⠒⠕⠻"
<exp_line_segment> ::= "⠐" <exp> "⠣⠱⠻"
                     | "⠐" "⠣⠱⠻"
<exp_ray> ::= "⠐" <exp> "⠣⠫⠕⠻"
  | "⠐" <exp> "⠣⠫⠕⠻"
<exp_arc> ::= "⠐" <exp> "⠣⠫⠁⠻"
  | "⠐" "⠣⠫⠁⠻"
<exp_sum> ::= "⠐⠨⠠⠎⠩" <exp> "⠣" <exp> "⠻"
  | "⠐⠨⠠⠎⠩" "⠣" <exp> "⠻"
  | "⠐⠨⠠⠎⠩" <exp> "⠣" "⠻"
  | "⠐⠨⠠⠎⠩" "⠣" "⠻"
<exp_vector> ::= "⠐" <exp> "⠣⠫⠒⠒⠈⠕⠻"
  | "⠐" "⠣⠫⠒⠒⠈⠕⠻"
<exp_binom> ::= "⠷⠠⠉⠰" <exp> "⠐⠘" <exp> "⠐⠾"
  | "⠷⠠⠉⠰" "⠐⠘" <exp> "⠐⠾"
  | "⠷⠠⠉⠰" <exp> "⠐⠘" "⠐⠾"
  | "⠷⠠⠉⠰" "⠐⠘" "⠐⠾"
<exp_limit> ::= "⠐⠇⠊⠍⠩" <exp> "⠀⠫⠕⠀" <exp> "⠻"
  | "⠐⠇⠊⠍⠩" "⠀⠫⠕⠀" <exp> "⠻"
  | "⠐⠇⠊⠍⠩" <exp> "⠀⠫⠕⠀" "⠻"
  | "⠐⠇⠊⠍⠩" "⠀⠫⠕⠀" "⠻"
<exp_sup> ::= "⠘" <exp> "⠐"
  | "⠘" "⠐"
<exp_sub> ::= "⠰" <exp> "⠐"
  | "⠰" "⠐"
<exp_under> ::= "⠐" <exp> "⠩" <exp> "⠻"
  | "⠐" "⠩" <exp> "⠻"
  | "⠐" <exp> "⠩" "⠻"
  | "⠐" "⠩" "⠻"
<exp_over> ::= "⠐" <exp> "⠣" <exp> "⠻"
  | "⠐" "⠣" <exp> "⠻"
  | "⠐" <exp> "⠣" "⠻"
  | "⠐" "⠣" "⠻"
<s> ::= "?"
<exp_underover> ::= "⠐" <exp> "⠩" <exp> "⠣" <s> "⠻"
  | "⠐" "⠩" <exp> "⠣" <s> "⠻"
  | "⠐" <exp> "⠩" "⠣" <s> "⠻"
  | "⠐" "⠩" "⠣" <s> "⠻"
<exp_sub_simple> ::= "⠰"
<exp_sup_simple> ::= "⠘"
<en_uppercase_optional> ::= "⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵"
<en_uppercase_ending> ::= "⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵"
<en_uppercase_continue> ::= "⠠⠠" 
  | "⠠⠠" <en_uppercase_optional> <en_uppercase_ending>
  | "⠠⠠" <en_uppercase_ending>
<other> ::= "⠫⠒⠒⠕⠫⠒⠒⠕⠫⠒⠒⠕"|"⠐⠫⠉⠸⠫⠈⠡⠻⠣⠸⠣⠻"|"⠫⠉⠸⠫⠫⠉⠸⠫⠈⠡⠻⠻"|"⠫⠪⠒⠒⠫⠪⠒⠒⠫⠪⠒⠒"|"⠫⠣⠒⠒⠕⠐⠫⠩⠒⠒⠕"|"⠫⠣⠒⠒⠕⠐⠫⠣⠒⠒⠕"|"⠫⠩⠒⠒⠕⠐⠫⠩⠒⠒⠕"|"⠫⠩⠒⠒⠕⠐⠫⠣⠒⠒⠕"|"⠫⠢⠤⠔⠒⠢⠤⠔⠒⠢⠕"|"⠐⠫⠒⠒⠕⠩⠈⠱⠈⠱⠻"|"⠫⠪⠒⠒⠈⠫⠉⠸⠫⠬⠻"|"⠐⠫⠪⠒⠒⠩⠈⠱⠈⠱⠻"|"⠫⠈⠪⠒⠒⠫⠒⠒⠠⠕"|"⠫⠒⠒⠈⠕⠫⠠⠪⠒⠒"|"⠫⠪⠨⠗⠻⠸⠫⠫⠁⠻"|"⠐⠫⠒⠒⠕⠣⠸⠐⠅⠻"|"⠐⠫⠪⠒⠒⠣⠸⠨⠂⠻"|"⠐⠨⠅⠩⠡⠡⠣⠡⠡⠻"|"⠐⠨⠡⠣⠫⠣⠒⠒⠳⠻"|"⠳⠳⠈⠫⠣⠒⠒⠕⠻"|"⠳⠳⠈⠫⠩⠒⠒⠕⠻"|"⠳⠳⠈⠫⠪⠒⠒⠕⠻"|"⠐⠤⠩⠡⠡⠣⠡⠡⠻"|"⠐⠅⠈⠐⠅⠈⠐⠅⠻"|"⠨⠂⠈⠨⠂⠈⠨⠂⠻"|"⠫⠪⠒⠒⠕⠈⠨⠡⠻"|"⠐⠫⠒⠒⠕⠣⠨⠅⠻"|"⠐⠫⠒⠒⠕⠣⠈⠱⠻"|"⠐⠫⠪⠒⠒⠩⠈⠱⠻"|"⠐⠫⠒⠒⠕⠩⠈⠱⠻"|"⠐⠫⠪⠒⠒⠣⠐⠅⠻"|"⠐⠫⠒⠒⠕⠣⠨⠂⠻"|"⠫⠪⠒⠒⠈⠸⠐⠅⠻"|"⠮⠈⠫⠉⠸⠫⠡⠻⠻"|"⠐⠈⠱⠈⠱⠣⠸⠣⠻"|"⠐⠸⠇⠣⠡⠡⠡⠡⠻"|"⠐⠫⠪⠒⠒⠣⠨⠅⠻"|"⠫⠒⠒⠕⠈⠸⠨⠂⠻"|"⠐⠫⠪⠒⠒⠣⠈⠱⠻"|"⠳⠈⠫⠪⠒⠒⠕⠻"|"⠫⠒⠒⠕⠫⠪⠒⠒"|"⠫⠪⠒⠒⠫⠒⠒⠕"|"⠫⠪⠒⠒⠫⠪⠒⠒"|"⠫⠒⠒⠕⠫⠒⠒⠕"|"⠳⠈⠫⠪⠶⠶⠕⠻"|"⠨⠡⠈⠫⠒⠒⠕⠻"|"⠳⠳⠈⠫⠪⠒⠒⠻"|"⠳⠳⠈⠫⠒⠒⠕⠻"|"⠐⠈⠱⠩⠡⠣⠡⠻"|"⠐⠨⠅⠣⠡⠣⠡⠻"|"⠐⠨⠅⠩⠡⠣⠡⠻"|"⠐⠨⠅⠣⠙⠑⠋⠻"|"⠫⠲⠸⠫⠢⠈⠔⠻"|"⠐⠫⠒⠒⠕⠩⠬⠻"|"⠐⠫⠪⠒⠒⠩⠬⠻"|"⠫⠪⠒⠒⠈⠐⠅⠻"|"⠐⠈⠱⠨⠅⠣⠡⠻"|"⠨⠅⠐⠨⠅⠐⠨⠅"|"⠐⠐⠅⠱⠱⠣⠡⠻"|"⠐⠨⠂⠱⠱⠣⠡⠻"|"⠨⠐⠅⠌⠈⠱⠈⠱"|"⠨⠨⠂⠌⠈⠱⠈⠱"|"⠨⠐⠅⠈⠨⠐⠅⠻"|"⠨⠨⠂⠈⠨⠨⠂⠻"|"⠐⠸⠐⠅⠩⠈⠡⠻"|"⠐⠸⠨⠂⠩⠈⠡⠻"|"⠐⠸⠐⠅⠱⠣⠡⠻"|"⠐⠸⠨⠂⠱⠣⠡⠻"|"⠐⠨⠅⠩⠳⠣⠳⠻"|"⠨⠡⠈⠫⠪⠒⠒⠻"|"⠫⠪⠒⠒⠈⠈⠡⠻"|"⠫⠒⠒⠕⠈⠨⠂⠻"|"⠳⠈⠫⠪⠒⠒⠻"|"⠳⠈⠫⠒⠒⠕⠻"|"⠫⠣⠪⠒⠒⠕⠳"|"⠳⠈⠫⠪⠶⠶⠻"|"⠳⠈⠫⠶⠶⠕⠻"|"⠫⠪⠢⠤⠔⠒⠢"|"⠫⠢⠤⠔⠒⠢⠕"|"⠫⠪⠸⠫⠫⠁⠻"|"⠮⠮⠮⠈⠫⠑⠻"|"⠮⠈⠫⠪⠢⠔⠻"|"⠮⠈⠫⠢⠔⠕⠻"|"⠐⠨⠅⠣⠨⠡⠻"|"⠐⠨⠅⠣⠫⠁⠻"|"⠐⠨⠅⠣⠸⠣⠻"|"⠐⠨⠅⠣⠸⠩⠻"|"⠐⠨⠅⠣⠈⠼⠻"|"⠐⠨⠅⠣⠫⠞⠻"|"⠐⠨⠅⠣⠸⠦⠻"|"⠨⠬⠈⠫⠪⠒⠻"|"⠫⠉⠸⠫⠈⠡⠻"|"⠫⠉⠸⠫⠸⠌⠻"|"⠫⠉⠸⠫⠨⠡⠻"|"⠫⠉⠸⠫⠈⠼⠻"|"⠫⠉⠸⠫⠨⠅⠻"|"⠫⠉⠸⠫⠤⠤⠻"|"⠐⠨⠅⠩⠸⠣⠻"|"⠨⠡⠈⠸⠐⠅⠻"|"⠨⠡⠈⠸⠨⠂⠻"|"⠫⠣⠳⠒⠒⠨⠡"|"⠫⠲⠸⠫⠈⠼⠻"|"⠨⠠⠎⠈⠫⠉⠻"|"⠫⠉⠸⠫⠨⠌⠻"|"⠫⠞⠸⠫⠈⠡⠻"|"⠐⠈⠩⠣⠱⠱⠻"|"⠐⠈⠩⠩⠱⠱⠻"|"⠐⠈⠬⠣⠱⠱⠻"|"⠐⠈⠬⠩⠱⠱⠻"|"⠳⠳⠳⠈⠸⠇⠻"|"⠐⠐⠅⠣⠸⠦⠻"|"⠐⠨⠂⠣⠸⠦⠻"|"⠐⠅⠱⠱⠈⠡⠻"|"⠨⠂⠱⠱⠈⠡⠻"|"⠨⠐⠅⠈⠱⠈⠱"|"⠨⠨⠂⠈⠱⠈⠱"|"⠸⠐⠅⠸⠫⠡⠻"|"⠸⠨⠂⠸⠫⠡⠻"|"⠐⠸⠐⠅⠩⠬⠻"|"⠐⠸⠨⠂⠩⠬⠻"|"⠸⠐⠅⠈⠱⠈⠱"|"⠸⠨⠂⠈⠱⠈⠱"|"⠸⠨⠂⠐⠸⠐⠅"|"⠌⠫⠩⠒⠒⠳⠽"|"⠫⠳⠒⠐⠫⠳⠒"|"⠠⠠⠧⠊⠊⠊"|"⠫⠣⠪⠒⠒⠕"|"⠫⠣⠒⠒⠕⠕"|"⠫⠩⠒⠒⠕⠕"|"⠫⠪⠒⠒⠠⠽"|"⠫⠠⠯⠒⠒⠕"|"⠫⠣⠳⠒⠒⠕"|"⠫⠩⠳⠒⠒⠕"|"⠫⠪⠒⠒⠈⠽"|"⠫⠈⠯⠒⠒⠕"|"⠫⠪⠔⠒⠢⠕"|"⠫⠩⠔⠢⠔⠕"|"⠫⠩⠠⠳⠒⠕"|"⠫⠣⠒⠒⠠⠕"|"⠫⠣⠒⠒⠈⠕"|"⠫⠩⠒⠒⠈⠕"|"⠫⠩⠒⠒⠠⠕"|"⠫⠣⠪⠶⠶⠕"|"⠫⠣⠒⠀⠒⠕"|"⠫⠩⠒⠀⠒⠕"|"⠮⠮⠈⠫⠑⠻"|"⠌⠈⠱⠌⠨⠅"|"⠈⠱⠈⠱⠈⠱"|"⠐⠨⠅⠣⠡⠻"|"⠨⠡⠈⠨⠅⠻"|"⠐⠨⠅⠣⠍⠻"|"⠐⠅⠈⠐⠅⠻"|"⠨⠂⠈⠨⠂⠻"|"⠸⠐⠅⠌⠨⠅"|"⠸⠨⠂⠌⠨⠅"|"⠫⠉⠸⠫⠬⠻"|"⠫⠉⠸⠫⠤⠻"|"⠫⠉⠸⠫⠡⠻"|"⠫⠲⠸⠫⠬⠻"|"⠫⠲⠸⠫⠱⠻"|"⠫⠲⠸⠫⠡⠻"|"⠫⠨⠡⠒⠒⠡"|"⠫⠡⠒⠒⠨⠡"|"⠐⠈⠬⠩⠱⠻"|"⠐⠈⠩⠣⠱⠻"|"⠐⠈⠬⠣⠱⠻"|"⠐⠈⠑⠣⠡⠻"|"⠐⠈⠑⠣⠱⠻"|"⠐⠈⠢⠣⠱⠻"|"⠐⠱⠩⠸⠣⠻"|"⠫⠲⠸⠫⠳⠻"|"⠨⠨⠷⠨⠨⠷"|"⠨⠨⠾⠨⠨⠾"|"⠫⠪⠶⠶⠶⠕"|"⠫⠪⠒⠒⠒⠳"|"⠫⠳⠒⠒⠒⠕"|"⠫⠪⠶⠶⠶⠳"|"⠫⠳⠶⠶⠶⠕"|"⠫⠘⠪⠒⠒⠕"|"⠫⠰⠪⠒⠒⠕"|"⠡⠈⠨⠨⠷⠻"|"⠡⠈⠨⠨⠾⠻"|"⠫⠲⠸⠫⠔⠻"|"⠫⠲⠸⠫⠢⠻"|"⠐⠫⠞⠣⠡⠻"|"⠨⠬⠈⠫⠡⠻"|"⠨⠬⠈⠫⠬⠻"|"⠈⠩⠈⠈⠩⠻"|"⠈⠬⠈⠈⠬⠻"|"⠮⠈⠨⠠⠎⠻"|"⠐⠬⠣⠨⠡⠻"|"⠐⠬⠣⠸⠣⠻"|"⠐⠬⠣⠈⠱⠻"|"⠐⠈⠡⠣⠡⠻"|"⠐⠈⠡⠩⠱⠻"|"⠫⠞⠸⠫⠬⠻"|"⠫⠞⠸⠫⠤⠻"|"⠐⠨⠬⠣⠱⠻"|"⠐⠨⠩⠣⠱⠻"|"⠨⠩⠈⠈⠩⠻"|"⠨⠬⠈⠈⠬⠻"|"⠐⠈⠩⠣⠡⠻"|"⠐⠈⠬⠣⠡⠻"|"⠈⠬⠈⠈⠩⠻"|"⠐⠈⠩⠩⠱⠻"|"⠐⠨⠅⠩⠡⠻"|"⠐⠸⠇⠣⠡⠻"|"⠳⠳⠈⠸⠇⠻"|"⠐⠈⠱⠣⠡⠻"|"⠈⠱⠈⠱⠨⠅"|"⠐⠨⠅⠩⠬⠻"|"⠐⠨⠅⠣⠬⠻"|"⠐⠂⠐⠂⠨⠅"|"⠐⠅⠈⠨⠡⠻"|"⠨⠂⠈⠨⠡⠻"|"⠐⠅⠱⠱⠘⠡"|"⠨⠂⠱⠱⠘⠡"|"⠐⠅⠈⠱⠈⠱"|"⠨⠂⠈⠱⠈⠱"|"⠐⠅⠨⠅⠨⠂"|"⠨⠂⠨⠅⠐⠅"|"⠐⠅⠈⠱⠨⠂"|"⠨⠂⠈⠱⠐⠅"|"⠐⠅⠨⠂⠨⠅"|"⠨⠂⠐⠅⠨⠅"|"⠈⠱⠐⠅⠨⠅"|"⠈⠱⠨⠂⠨⠅"|"⠨⠂⠈⠐⠅⠻"|"⠨⠐⠅⠌⠨⠅"|"⠨⠨⠂⠌⠨⠅"|"⠸⠐⠅⠸⠨⠂"|"⠸⠨⠂⠸⠐⠅"|"⠸⠐⠅⠸⠐⠅"|"⠸⠨⠂⠸⠨⠂"|"⠫⠩⠒⠒⠳⠽"|"⠐⠨⠅⠩⠳⠻"|"⠐⠨⠅⠣⠳⠻"|"⠐⠳⠣⠨⠡⠻"|"⠐⠳⠩⠨⠡⠻"|"⠈⠱⠈⠫⠇⠻"|"⠱⠈⠳⠳⠳⠻"|"⠠⠠⠊⠊⠊"|"⠠⠠⠧⠊⠊"|"⠫⠣⠒⠒⠕"|"⠫⠩⠒⠒⠕"|"⠫⠪⠒⠒⠕"|"⠫⠘⠪⠒⠒"|"⠫⠘⠒⠒⠕"|"⠫⠰⠒⠒⠕"|"⠫⠰⠪⠒⠒"|"⠫⠪⠔⠒⠢"|"⠫⠔⠒⠢⠕"|"⠫⠪⠪⠒⠒"|"⠫⠒⠒⠕⠕"|"⠫⠪⠒⠒⠳"|"⠫⠳⠒⠒⠕"|"⠫⠪⠒⠈⠳"|"⠫⠈⠪⠒⠒"|"⠫⠠⠪⠒⠒"|"⠫⠒⠒⠈⠕"|"⠫⠒⠒⠠⠕"|"⠫⠣⠶⠶⠕"|"⠫⠩⠶⠶⠕"|"⠫⠪⠶⠶⠕"|"⠫⠘⠪⠶⠶"|"⠫⠘⠶⠶⠕"|"⠫⠰⠶⠶⠕"|"⠫⠰⠪⠶⠶"|"⠫⠪⠒⠀⠒"|"⠫⠒⠀⠒⠕"|"⠳⠫⠪⠒⠒"|"⠫⠒⠒⠕⠳"|"⠐⠬⠣⠡⠻"|"⠫⠪⠨⠗⠻"|"⠮⠈⠫⠉⠻"|"⠈⠱⠌⠨⠅"|"⠌⠈⠱⠈⠱"|"⠈⠱⠈⠱⠱"|"⠠⠈⠱⠨⠅"|"⠐⠅⠌⠨⠅"|"⠨⠂⠌⠨⠅"|"⠌⠈⠣⠠⠣"|"⠌⠐⠅⠈⠱"|"⠌⠨⠂⠈⠱"|"⠌⠐⠅⠨⠂"|"⠌⠨⠂⠐⠅"|"⠨⠐⠅⠈⠱"|"⠨⠨⠂⠈⠱"|"⠌⠸⠐⠅⠱"|"⠌⠸⠨⠂⠱"|"⠡⠈⠨⠬⠻"|"⠬⠈⠨⠬⠻"|"⠫⠣⠒⠒⠳"|"⠫⠳⠳⠳⠒"|"⠌⠫⠳⠶⠶"|"⠌⠫⠳⠳⠒"|"⠌⠫⠳⠳⠶"|"⠫⠒⠒⠨⠡"|"⠫⠞⠨⠗⠻"|"⠡⠈⠐⠅⠻"|"⠡⠈⠨⠂⠻"|"⠱⠈⠈⠑⠻"|"⠱⠈⠈⠢⠻"|"⠈⠬⠈⠡⠻"|"⠫⠨⠡⠒⠒"|"⠫⠪⠒⠒⠒"|"⠫⠒⠒⠒⠕"|"⠫⠪⠶⠶⠶"|"⠫⠶⠶⠶⠕"|"⠫⠪⠨⠁⠻"|"⠫⠪⠨⠕⠻"|"⠫⠳⠶⠶⠳"|"⠮⠈⠱⠱⠻"|"⠮⠈⠸⠌⠻"|"⠮⠈⠠⠉⠻"|"⠮⠈⠫⠲⠻"|"⠮⠈⠈⠡⠻"|"⠮⠈⠨⠩⠻"|"⠮⠈⠨⠬⠻"|"⠐⠬⠩⠡⠻"|"⠐⠱⠩⠡⠻"|"⠨⠩⠈⠡⠻"|"⠨⠬⠈⠤⠻"|"⠨⠬⠱⠨⠩"|"⠨⠩⠱⠨⠬"|"⠨⠬⠐⠨⠬"|"⠨⠩⠐⠨⠩"|"⠈⠩⠈⠳⠻"|"⠈⠬⠈⠳⠻"|"⠈⠩⠈⠱⠻"|"⠈⠬⠈⠱⠻"|"⠈⠱⠱⠈⠱"|"⠨⠅⠐⠨⠅"|"⠐⠅⠈⠱⠱"|"⠨⠂⠈⠱⠱"|"⠨⠂⠐⠐⠅"|"⠨⠐⠅⠌⠱"|"⠨⠨⠂⠌⠱"|"⠨⠐⠅⠨⠅"|"⠨⠨⠂⠨⠅"|"⠸⠐⠅⠨⠅"|"⠸⠨⠂⠨⠅"|"⠸⠐⠅⠈⠱"|"⠸⠨⠂⠈⠱"|"⠫⠣⠶⠶⠳"|"⠱⠈⠫⠇⠻"|"⠷⠠⠉⠾"|"⠷⠠r⠾"|"⠤⠤⠤⠤"|"⠈⠴⠴⠴"|"⠠⠠⠊⠊"|"⠠⠠⠊⠧"|"⠠⠠⠧⠊"|"⠠⠠⠊⠭"|"⠫⠪⠒⠒"|"⠫⠒⠒⠕"|"⠫⠢⠔⠕"|"⠫⠪⠢⠔"|"⠫⠪⠶⠶"|"⠫⠶⠶⠕"|"⠫⠪⠸⠸"|"⠫⠸⠸⠕"|"⠣⠒⠜⠻"|"⠣⠲⠜⠻"|"⠌⠈⠱⠱"|"⠈⠱⠨⠅"|"⠈⠱⠈⠱"|"⠈⠣⠠⠣"|"⠐⠂⠨⠅"|"⠨⠅⠐⠂"|"⠨⠅⠨⠅"|"⠐⠅⠨⠅"|"⠨⠂⠨⠅"|"⠌⠐⠅⠱"|"⠌⠨⠂⠱"|"⠐⠅⠈⠱"|"⠨⠂⠈⠱"|"⠐⠅⠨⠂"|"⠨⠂⠐⠅"|"⠌⠸⠐⠅"|"⠌⠸⠨⠂"|"⠸⠐⠅⠱"|"⠸⠨⠂⠱"|"⠫⠳⠒⠒"|"⠫⠒⠒⠳"|"⠫⠳⠶⠶"|"⠫⠳⠳⠒"|"⠫⠳⠳⠶"|"⠌⠫⠳⠒"|"⠩⠒⠒⠒"|"⠘⠒⠒⠒"|"⠰⠒⠒⠒"|"⠈⠈⠸⠷"|"⠈⠈⠸⠾"|"⠮⠮⠮⠮"|"⠮⠈⠱⠻"|"⠨⠬⠨⠩"|"⠨⠩⠨⠬"|"⠈⠩⠈⠩"|"⠈⠬⠈⠬"|"⠨⠅⠈⠱"|"⠐⠅⠱⠱"|"⠨⠂⠱⠱"|"⠨⠅⠐⠅"|"⠨⠅⠨⠂"|"⠈⠱⠐⠅"|"⠈⠱⠨⠂"|"⠈⠣⠨⠅"|"⠨⠐⠅⠱"|"⠨⠨⠂⠱"|"⠸⠐⠅⠳"|"⠳⠸⠨⠂"|"⠫⠒⠳⠳"|"⠫⠶⠳⠳"|"⠈⠠⠎"|"⡘⠨⠡"|"⠂⠌⠲"|"⠂⠌⠆"|"⠒⠌⠲"|"⠨⠠⠁"|"⠨⠠⠃"|"⠨⠠⠛"|"⠨⠠⠙"|"⠨⠠⠑"|"⠨⠠⠵"|"⠨⠠⠱"|"⠨⠠⠹"|"⠨⠠⠊"|"⠨⠠⠅"|"⠨⠠⠇"|"⠨⠠⠍"|"⠨⠠⠝"|"⠨⠠⠭"|"⠨⠠⠕"|"⠨⠠⠏"|"⠨⠠⠗"|"⠨⠠⠎"|"⠨⠠⠞"|"⠨⠠⠥"|"⠨⠠⠋"|"⠨⠠⠯"|"⠨⠠⠽"|"⠨⠠⠺"|"⠨⠈⠹"|"⠨⠈⠏"|"⠨⠈⠅"|"⠸⠸⠻"|"⠂⠂⠂"|"⠈⠴⠴"|"⠈⠰⠇"|"⠈⠠⠁"|"⠌⠈⠿"|"⠌⠈⠑"|"⠌⠈⠢"|"⠌⠫⠇"|"⠮⠮⠮"|"⠤⠐⠂"|"⠠⠈⠱"|"⠌⠈⠱"|"⠱⠈⠱"|"⠈⠱⠱"|"⠈⠣⠱"|"⠌⠨⠅"|"⠌⠸⠇"|"⠐⠅⠱"|"⠨⠂⠱"|"⠌⠐⠅"|"⠌⠨⠂"|"⠨⠐⠅"|"⠨⠨⠂"|"⠸⠐⠅"|"⠸⠨⠂"|"⠫⠳⠒"|"⠫⠳⠶"|"⠠⠱⠱"|"⠱⠐⠅"|"⠱⠨⠂"|"⠒⠒⠒"|"⠈⠘⠷"|"⠈⠘⠾"|"⠈⠰⠷"|"⠈⠰⠾"|"⠈⠠⠷"|"⠈⠠⠾"|"⠨⠠⠷"|"⠨⠠⠾"|"⠫⠸⠲"|"⠫⠸⠗"|"⠫⠸⠞"|"⠸⠨⠫"|"⠫⠸⠉"|"⠈⠸⠷"|"⠈⠸⠾"|"⠨⠨⠷"|"⠨⠨⠾"|"⠨⠸⠷"|"⠨⠸⠾"|"⠫⠪⠱"|"⠫⠞⠱"|"⠫⠞⠎"|"⠫⠒⠳"|"⠫⠶⠳"|"⠳⠳⠳"|"⠫⠸⠢"|"⠫⠸⠖"|"⠫⠸⠑"|"⠫⠸⠦"|"⠸⠈⠷"|"⠸⠈⠾"|"⠸⠖"|"⠨⠼"|"⠈⠎"|"⠈⠴"|"⠸⠯"|"⠐⠂"|"⠸⠆"|"⠐⠅"|"⠨⠅"|"⠨⠂"|"⠸⠦"|"⠈⠁"|"⠈⠷"|"⠸⠡"|"⠈⠾"|"⠸⠣"|"⠨⠷"|"⠨⠾"|"⠈⠱"|"⠈⠉"|"⠈⠇"|"⠬⠤"|"⡘⠆"|"⡘⠒"|"⠨⠏"|"⡘⠂"|"⠈⠡"|"⠨⠌"|"⠨⠁"|"⠨⠃"|"⠨⠛"|"⠨⠙"|"⠨⠑"|"⠨⠵"|"⠨⠱"|"⠨⠹"|"⠨⠊"|"⠨⠇"|"⠨⠍"|"⠨⠝"|"⠨⠭"|"⠨⠕"|"⠨⠗"|"⠨⠒"|"⠨⠎"|"⠨⠞"|"⠨⠥"|"⠨⠋"|"⠨⠯"|"⠨⠽"|"⠨⠺"|"⠤⠤"|"⠳⠳"|"⠠⠦"|"⠴⠄"|"⠸⠻"|"⠔⠔"|"⠄⠄"|"⠈⠓"|"⠊⠍"|"⠗⠑"|"⠠⠊"|"⠠⠧"|"⠠⠭"|"⠈⠯"|"⠈⠙"|"⠈⠿"|"⠸⠴"|"⠨⠫"|"⠈⠑"|"⠈⠢"|"⠸⠳"|"⠤⠬"|"⠸⠌"|"⠈⠼"|"⠨⠡"|"⠜⠻"|"⠸⠿"|"⠠⠿"|"⠫⠪"|"⠌⠳"|"⠫⠇"|"⠈⠩"|"⠈⠬"|"⠨⠩"|"⠨⠬"|"⠮⠮"|"⠠⠡"|"⠈⠌"|"⠰⠆"|"⠨⠤"|"⠸⠇"|"⠫⠏"|"⠫⠎"|"⠫⠁"|"⠫⠄"|"⠠⠷"|"⠠⠾"|"⠫⠲"|"⠫⠗"|"⠫⠞"|"⠫⠙"|"⠫⠉"|"⠣⠮"|"⠩⠮"|"⠫⠢"|"⠫⠖"|"⠫⠑"|"⠄"|"⠷"|"⠾"|"⠡"|"⠬"|"⠠"|"⠤"|"⠨"|"⠌"|"⠴"|"⠂"|"⠆"|"⠒"|"⠲"|"⠢"|"⠖"|"⠶"|"⠦"|"⠔"|"⠸"|"⠳"|"⠱"|"⠮"|"⠣"|"⠜"|"⠿"
<en_lowercase> ::= "⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵"
<en_uppercase_letters> ::= "⠁"|"⠃"|"⠉"|"⠙"|"⠑"|"⠋"|"⠛"|"⠓"|"⠊"|"⠚"|"⠅"|"⠇"|"⠍"|"⠝"|"⠕"|"⠏"|"⠟"|"⠗"|"⠎"|"⠞"|"⠥"|"⠧"|"⠺"|"⠭"|"⠽"|"⠵"
<en_uppercase> ::= "⠠" <en_uppercase_letters>
<operands> ::= "⠬"|"⠤"|"⠈⠡"|"⠡"|"⠨⠌"|"⠨⠅"|"⠨⠂"|"⠐⠅"
<operand> ::= <operands> | <operands> <operand>;
<numbers> ::= "⠴"|"⠂"|"⠆"|"⠒"|"⠲"|"⠢"|"⠖"|"⠶"|"⠦"|"⠔"
<number> ::= "⠼" <numbers> | <numbers>
<const> ::= <en_uppercase_continue>|<en_lowercase>|<en_uppercase>|<number>|<other>
<comma> ::= "⠠"
<commas> ::= <comma> | <comma> <commas>
<exp_frac> ::= <commas> "⠹" <exp> <commas> "⠌" <exp> <commas> "⠼"
  | "⠹" <exp> <commas> "⠌" <exp> <commas> "⠼"
  | <commas> "⠹" <commas> "⠌" <exp> <commas> "⠼"
  | "⠹" <commas> "⠌" <exp> <commas> "⠼"
  | <commas> "⠹" <exp> "⠌" <exp> <commas> "⠼"
  | "⠹" <exp> "⠌" <exp> <commas> "⠼"
  | "⠹" "⠌" <exp> <commas> "⠼"
  | <commas> "⠹" <exp> <commas> "⠌" <commas> "⠼"
  | "⠹" <exp> <commas> "⠌" <commas> "⠼"
  | <commas> "⠹" <commas> "⠌" <commas> "⠼"
  | "⠹" <commas> "⠌" <commas> "⠼"
  | <commas> "⠹" <exp> "⠌" <commas> "⠼"
  | "⠹" <exp> "⠌" <commas> "⠼"
  | <commas> "⠹" "⠌" <commas> "⠼"
  | "⠹" "⠌" <commas> "⠼"
  | "⠹" <exp> <commas> "⠌" <exp> "⠼"
  | <commas> "⠹" <commas> "⠌" <exp> "⠼"
  | "⠹" <commas> "⠌" <exp> "⠼"
  | <commas> "⠹" <exp> "⠌" <exp> "⠼"
  | "⠹" <exp> "⠌" <exp> "⠼"
  | <commas> "⠹" "⠌" <exp> "⠼"
  | "⠹" "⠌" <exp> "⠼"
  | "⠹" <exp> <commas> "⠌" "⠼"
  | <commas> "⠹" <commas> "⠌" "⠼"
  | "⠹" <commas> "⠌" "⠼"
  | "⠹" "⠌" "⠼"
<exp_sqrt> ::= "⠜" <exp> "⠻"
  | "⠜" "⠻"
<exp_root> ::= "⠣" <exp> "⠜" <exp> "⠻"
  | "⠣" "⠜" <exp> "⠻"
  | "⠣" <exp> "⠜" "⠻"
  | "⠣" "⠜" "⠻"
<exp_parenthesis> ::= "⠷" <exp> "⠾"
  | "⠷" "⠾"
<exp_square_bracket> ::= "⠈⠷" <exp> "⠈⠾"
  | "⠈⠷" "⠈⠾"
<exp_curly_brace> ::= "⠨⠷" <exp> "⠨⠾"
  | "⠨⠷" "⠨⠾"
<expr_options> ::= <exp_line>|<exp_line_segment>|<exp_raw>|<exp_arc>|<exp_sum>|<exp_vector>|<exp_binom>|<exp_limit>|<exp_sup>|<exp_sub>|<exp_under>|<exp_over>|<exp_underover>|<exp_sub_simple>|<exp_sup_simple>|<exp_frac>|<exp_sqrt>|<exp_root>|<exp_parenthesis>|<exp_square_bracket>|<exp_curly_brace>|<const>|<operand>
<expr_i> ::= <expr_options> | <expr_options> <expr_i>
"#;
  //println!("{}", grammar);
  let converter: Grammar = grammar.parse()?;
  //let seed: [u8; 32] = [1; 32];
  //let mut rng: StdRng = SeedableRng::from_seed(seed);
  //let equation = converter.generate_seeded(&mut rng)?;
  //println!("Test: {}", equation);
  //for prod in converter.productions_iter() {
  //  println!("{:?}", prod);
  //}
  let mut query = String::new();
  io::stdin()
    .read_line(&mut query)
    .expect("Could not read input");
  let parse_tree = converter.parse_input(&query);
  println!("{:?}", parse_tree.size_hint());
  for item in parse_tree { 
    println!("{:?}", item);
  }
  Ok(())
}
